fn binarySearch(l: List<Int>, target: Int) -> Int do
    let low = 0
    let high = l.length() - 1
    while low <= high do
        let mid = (low + high) / 2
        if l[mid] == target do
            return mid
        else if l[mid] < target do
            low = mid + 1
        else do
            high = mid - 1
        end
    end
    return -1
end

module MyModule do
    @export
    struct Vector2 do
        @public
        let x: Real

        @public
        let y: Real

        @public
        constructor() do

        end

        @public
        destructor() do

        end

        @public
        fn normalize() -> Void do
            // ...
        end

        @public
        fn toString() -> String do
            return f"Vector2({x}, {y})"
        end
    end
end
